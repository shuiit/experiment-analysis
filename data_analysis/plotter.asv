classdef plotter
    %UNTITLED4 Summary of this class goes here
    %   Detailed explanation goes here
    properties
        gray_mat
        col_mat
    end
    

    methods
        function obj = plotter()
            %UNTITLED4 Construct an instance of this class
            %   Detailed explanation goes here
           
            obj.gray_mat = colormap(gray)
            obj.col_mat = colormap(jet)
        end

        function all_data_plot(obj,time,prop,varargin)
            parser = inputParser;
            addParameter(parser,'alpha',0.3); % number of camera pointing in Z lab axis
            parse(parser, varargin{:})

            plot(time,prop,'LineWidth',2,'color',[obj.gray_mat(200,:),parser.Results.alpha])
        end


        function mean_plot(obj,insect,prop_name,label_y,varargin)
            parser = inputParser;
            addParameter(parser,'color_idx',13); % number of camera pointing in Z lab axis
            addParameter(parser,'plot_all_data',1); % number of camera pointing in Z lab axis
            addParameter(parser,'xlabel','time [ms]'); % number of camera pointing in Z lab axis
            parse(parser, varargin{:})
            time = insect.time_vec;

            prop = insect.get_prop(prop_name);
            mean_prop = mean(prop,2,'omitnan');
            if parser.Results.plot_all_data == 1
            obj.all_data_plot(time,prop);hold on
            end
            ax = plot(time,mean_prop,'LineWidth',3,'color',obj.col_mat(parser.Results.color_idx,:))
            xlabel(parser.Results.xlabel)
            ylabel(label_y)
            
        end


        function mov_plot(obj,insect,prop_name,mov_num,label_y,varargin)
            parser = inputParser;
            addParameter(parser,'color_idx',13); % number of camera pointing in Z lab axis
            addParameter(parser,'xlabel','time [ms]'); % number of camera pointing in Z lab axis
            parse(parser, varargin{:})

            time = insect.time_vec;
            prop = insect.get_prop(prop_name);


            mov_prop = insect.get_prop_mov(prop_name,mov_num);
            obj.all_data_plot(time,prop);hold on
            ax = plot(time,mov_prop,'LineWidth',3,'color',obj.col_mat(parser.Results.color_idx,:))
            xlabel(parser.Results.xlabel)
            ylabel(label_y)

        end


        function pert_plot(obj,pert,plot_zero_x,plot_zero_y,sp)
            if plot_zero_y == 1
            yline(0,'--k','LineWidth',1.5,'handlevisibility','off');
            end
            if plot_zero_x == 1
            xline(0,'--r','LineWidth',1.5,'handlevisibility','off','color',[0.8500 0.3250 0.0980]);
            if pert ~= 0
            xline(pert,'--','LineWidth',1.5,'handlevisibility','off','color',[0.2660 0.6740 0.1880]	);
            else
            pert = sp(1).XLim(2);
            end
            end

            rec =  [0,sp(1).YLim(1),pert,sp(1).YLim(2)-sp(1).YLim(1)];
            rectangle('Position',rec,...
                'EdgeColor','none','FaceColor',[0,0,0,0.1]); % Plots the rectangle
        end
        
        function cluster_plot(obj,insect,prop_to_cluster,time_to_cluster,prop_to_plot,varargin)
            parser = inputParser;
            addParameter(parser,'alpha',0.3); % number of camera pointing in Z lab axis
            parse(parser, varargin{:})

            idx_t = find(insect.time_vec == time_to_cluster);
            cluster_prop = insect.get_prop(prop_to_cluster);
            plot_prop = insect.get_prop(prop_to_plot);
            plot(insect.time_vec,plot_prop(:,cluster_prop(idx_t,:) >= 0),'color',[obj.col_mat(1,:),parser.Results.alpha],'LineWidth',2);hold on
            plot(insect.time_vec,plot_prop(:,cluster_prop(idx_t,:) < 0),'color',[obj.col_mat(256,:),parser.Results.alpha],'LineWidth',2);hold on
        end


        function plot_pitch_for_vel_z_vel_model_mov(obj,insect,exp_name,mov,pert,color_idx,max_time_xax)

            figure
            ax1 = subplot(3,1,1)
            obj.mov_plot(insect.(exp_name),'pitch',mov,'pitch [deg]','color_idx',color_idx)
            obj.pert_plot(pert,1,1,ax1)

            
            ax2 = subplot(3,1,2)
            obj.mov_plot(insect.(exp_name),'forward_vel',mov,'V_f_w_d [m/s]','color_idx',color_idx)
            obj.pert_plot(pert,1,1,ax2)
            
            ax3 = subplot(3,1,3)
            obj.mov_plot(insect.(exp_name),'z_vel',mov,'V_z [m/s]','color_idx',color_idx)
            obj.pert_plot(pert,1,1,ax3)

            
            ax1.XLim = [ax1.XLim(1),min(ax1.XLim(2),max_time_xax)]
            ax2.XLim = [ax1.XLim(1),min(ax1.XLim(2),max_time_xax)]
            ax3.XLim = [ax1.XLim(1),min(ax1.XLim(2),max_time_xax)]
            linkaxes([ax1,ax2,ax3],'x')

% set(gca, 'LineWidth', 5)
% set(gca,'fontsize',20)

        end


        function plot_mean_subplot(obj,fly,mos,exp_name,pert,color_idx,prop_name,max_time_xax)

            figure
            ax1 = subplot(2,1,1)
            obj.mean_plot(fly.(exp_name),prop_name,'pitch [deg]','color_idx',color_idx(1))
            obj.pert_plot(pert,1,1,ax1)
            
            ax2 = subplot(2,1,2)
            obj.mean_plot(mos.(exp_name),prop_name,'pitch [deg]','color_idx',color_idx(2))
            obj.pert_plot(pert,1,1,ax2)


            ax1.XLim = [ax1.XLim(1),min(ax1.XLim(2),max_time_xax)]
            ax2.XLim = [ax1.XLim(1),min(ax1.XLim(2),max_time_xax)]
            linkaxes([ax1,ax2],'x')
        end

        function violin_plot(obj,insect,ylabel,color,varargin)
            parser = inputParser;
            addParameter(parser,'xlabel','time [ms]'); % number of camera pointing in Z lab axis
            parse(parser, varargin{:})
        
            idx_to_violin = find(ismembertol(mos.(exp_name).time_vec,time_to_violin,1/fps -1/fps/2 ,'DataScale', 1))
            x_names = mos.(exp_name).time_vec(idx_to_violin)
            
            prop = mos.(exp_name).get_prop(prop_name);
            prop_time = prop(idx_to_violin,:);
            h = daviolinplot(prop_time','xtlabels', x_names,'colors',color,'box',0,'whiskers',0,'violinalpha',0.5,'bins',15,'outliers',0);
            xlabel(parser.Results.xlabel)
            ylabel(ylabel)
        end



        % function sp =plot_gray_props(obj,insect,prop_name,subplot_idx,pert,ttl,varargin)
        %     parser = inputParser;
        %     addParameter(parser,'plot_zero_x',1); % number of camera pointing in Z lab axis
        %     addParameter(parser,'plot_zero_y',1); % number of camera pointing in Z lab axis
        %     addParameter(parser,'num_of_sp',2); % number of camera pointing in Z lab axis
        %     addParameter(parser,'plot_mov',1); % number of camera pointing in Z lab axis
        %     addParameter(parser,'color_idx',13); % number of camera pointing in Z lab axis
        %     addParameter(parser,'ylabel',ttl); % number of camera pointing in Z lab axis
        %     addParameter(parser,'alpha',0.3); % number of camera pointing in Z lab axis
        % 
        %     parse(parser, varargin{:})
        % 
        % 
        %     time = insect.time_vec;
        %     prop = insect.get_prop(prop_name);
        % 
        % 
        %     mean_prop = mean(prop,2,'omitnan');
        %     legend_ttl = 'model movie'
        %     if parser.Results.plot_mov == 0
        %     mean_prop = insect.get_prop_mov(prop_name,parser.Results.plot_mov);
        %     legend_ttl = 'mean'
        %     end
        % 
        %     sp = subplot(parser.Results.num_of_sp,1,subplot_idx);hold on;box on
        %     title(ttl)
        % 
        %     if parser.Results.plot_zero_y == 1
        %     yline(0,'--k','LineWidth',1.5,'handlevisibility','off');
        %     end
        %     if parser.Results.plot_zero_x == 1
        %     xline(0,'--r','LineWidth',1.5,'handlevisibility','off','color',[0.8500 0.3250 0.0980]);
        %     if pert ~= 0
        %     xline(pert,'--','LineWidth',1.5,'handlevisibility','off','color',[0.2660 0.6740 0.1880]	);
        %     end
        %     end
        % 
        %     obj.all_data_plot(time,prop)
        %     ax = plot(time,mean_prop,'LineWidth',3,'color',obj.col_mat(parser.Results.color_idx,:))
        %     if pert == 0 
        %         pert = sp(1).XLim(2);
        %     end
        %     rec =  [0,sp(1).YLim(1),pert,sp(1).YLim(2)-sp(1).YLim(1)];
        %     rectangle('Position',rec,...
        %         'EdgeColor','none','FaceColor',[0,0,0,0.1]); % Plots the rectangle
        %     xlabel('time [ms]')
        %     ylabel(parser.Results.ylabel)
        %     set(gca,'fontsize',15)
        %     h_lg=legend(ax,legend_ttl,'Location','northeast','edgecolor','none','Orientation','vertical','box','off');
        % 
        % 
        % 
        % end

        function prop_mov = get_prop_mov(obj,prop,mov)
            prop_mov = obj.exp_mat(:,obj.insect_prop(prop),obj.mov_num(mov));
        end
    end
end